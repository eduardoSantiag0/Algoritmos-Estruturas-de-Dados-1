#define PAI(i) ((i-1)/2)
#define FILHO_ESQ(i) ( i*2+1)
#define FILHO_DIR(i) ( i*2+2)


// Usado na Remoção
void desceHeap(int v[], int m, int pos) { 
    int corr = pos, filho;

    // Verificar se o nó atual tem filho e se um dos dois é maior do que o atual
    while (FILHO_ESQ(corr) < m && (v[FILHO_ESQ(corr)] > v[corr] || 
           (FILHO_DIR(corr) < m && v[FILHO_DIR(corr)] > v[corr]))) 
    {
        if (FILHO_ESQ(i) > FILHO_DIR(i)) {
            trocar(v[FILHO_ESQ(i)], v[i]);
            corr = FILHO_ESQ(corr)
        } else {
            trocar(v[FILHO_DIR(i)], v[i]);
            corr = FILHO_DIR(corr)
        }
    }
}



// Usado na Inserção
sobeHeap(int v[], int pos) {
    int corr = pos; 

    while(corr > 0 && v[PAI(i)] < v[corr]) 
    {
        trocar(&v[]PAI(i), &v[corr]);
        corr = PAI(corr);
    }

}